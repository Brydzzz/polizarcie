generator client {
    provider = "prisma-client-js"
}

datasource db {
    url      = env("DATABASE_URL")
    provider = "postgresql"
}

model User {
    // required by Next-Auth
    id                  String                   @id @default(cuid())
    name                String?
    email               String                   @unique
    emailVerified       DateTime?
    image               String?
    accounts            Account[]
    sessions            Session[]
    Authenticator       Authenticator[]
    createdAt           DateTime                 @default(now())
    updatedAt           DateTime                 @updatedAt
    description         String?
    // Custom
    roles               Role[]                   @default([USER])
    gender              Gender                   @default(NOT_SET)
    preferredGender     Gender                   @default(NOT_SET)
    meetingStatus       Boolean                  @default(false)
    points              Int                      @default(0)
    medias              UserMedia[]
    favoriteRestaurants UserFavoriteRestaurant[]
    restaurantReviews   RestaurantReview[]
    dishReviews         DishReview[]
    follows             Follow[]                 @relation(name: "followUsersFrom")
    followedBy          Follow[]                 @relation(name: "followUsersTo")
}

model UserFavoriteRestaurant {
    id              String     @id @default(cuid())
    user            User?      @relation(fields: [userId], references: [id])
    userId          String?
    restaurant      Restaurant @relation(fields: [restaurantId], references: [id])
    restaurantId    String
    rankingPosition Int
    createdDate     DateTime   @default(now())
    updatedDate     DateTime   @updatedAt @db.Date
}

model UserMedia {
    id          String    @id @default(cuid())
    type        MediaType
    link        String
    user        User?     @relation(fields: [userId], references: [id])
    userId      String?
    createdDate DateTime  @default(now())
    updatedDate DateTime  @updatedAt @db.Date
    hidden      Boolean   @default(false)
}

model Restaurant {
    id             String                   @id @default(cuid())
    name           String                   @unique
    slug           String                   @unique
    address        Address?                 @relation(fields: [addressId], references: [id])
    addressId      String?                  @unique
    description    String
    createdDate    DateTime                 @default(now())
    updatedDate    DateTime                 @updatedAt @db.Date
    hidden         Boolean                  @default(false)
    openingTimeMon DateTime                 @db.Time()
    closingTimeMon DateTime                 @db.Time()
    openingTimeTue DateTime                 @db.Time()
    closingTimeTue DateTime                 @db.Time()
    openingTimeWen DateTime                 @db.Time()
    closingTimeWen DateTime                 @db.Time()
    openingTimeThu DateTime                 @db.Time()
    closingTimeThu DateTime                 @db.Time()
    openingTimeFri DateTime                 @db.Time()
    closingTimeFri DateTime                 @db.Time()
    openingTimeSat DateTime                 @db.Time()
    closingTimeSat DateTime                 @db.Time()
    openingTimeSun DateTime                 @db.Time()
    closingTimeSun DateTime                 @db.Time()
    reviews        RestaurantReview[]
    menu           Dish[]
    favoriteAmong  UserFavoriteRestaurant[]
}

model Dish {
    id           String       @id @default(cuid())
    name         String
    description  String
    price        Decimal      @db.Money
    totalStars   Int          @default(0)
    restaurant   Restaurant   @relation(fields: [restaurantId], references: [id])
    restaurantId String
    reviews      DishReview[]
    createdDate  DateTime     @default(now())
    updatedDate  DateTime     @updatedAt @db.Date
    hidden       Boolean      @default(false)
    type         DishType     @default(OTHER)
}

model Address {
    id          String      @id @default(cuid())
    name        String
    xCoords     Decimal
    yCoords     Decimal
    restaurant  Restaurant?
    createdDate DateTime    @default(now())
    updatedDate DateTime    @updatedAt @db.Date
}

model RestaurantReview {
    id           String     @id @default(cuid())
    content      String
    restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
    restaurantId String
    stars        Int
    amountSpent  Decimal    @db.Money
    createdDate  DateTime   @default(now())
    updatedDate  DateTime   @updatedAt @db.Date
    author       User       @relation(fields: [authorId], references: [id])
    authorId     String
    hidden       Boolean    @default(false)
}

model DishReview {
    id          String   @id @default(cuid())
    content     String
    dish        Dish     @relation(fields: [dishId], references: [id])
    dishId      String
    stars       Int
    createdDate DateTime @default(now())
    updatedDate DateTime @updatedAt @db.Date
    author      User     @relation(fields: [authorId], references: [id])
    authorId    String
    hidden      Boolean  @default(false)
}

model Follow {
    id     String   @id @default(cuid())
    from   User     @relation(name: "followUsersFrom", fields: [fromId], references: [id])
    fromId String
    to     User     @relation(name: "followUsersTo", fields: [toId], references: [id])
    toId   String
    date   DateTime @default(now()) @db.Timestamp()
}

// Required by Next-Auth
model Account {
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([provider, providerAccountId])
}

model Session {
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
    credentialID         String  @unique
    userId               String
    providerAccountId    String
    credentialPublicKey  String
    counter              Int
    credentialDeviceType String
    credentialBackedUp   Boolean
    transports           String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([userId, credentialID])
}

enum Gender {
    FEMALE
    MALE
    NOT_SET
    NON_BINARY
}

enum MediaType {
    FACEBOOK
    INSTAGRAM
    SNAPCHAT
    TWITTER
    TIKTOK
    GITHUB
}

enum Role {
    USER
    MODERATOR
    ADMIN
}

enum DishType {
    STARTER
    SOUP
    MAIN_DISH
    DESSERT
    OTHER
    DRINK
    SIDE
}
