generator client {
    provider = "prisma-client-js"
}

datasource db {
    url      = env("DATABASE_URL")
    provider = "postgresql"
}

model User {
    // required by Next-Auth
    id                   String                   @id @default(cuid())
    name                 String?
    email                String                   @unique
    emailVerified        DateTime?
    image                String?
    accounts             Account[]
    sessions             Session[]
    Authenticator        Authenticator[]
    createdAt            DateTime                 @default(now())
    updatedAt            DateTime                 @updatedAt
    description          String?
    // Custom
    passwordHash         UserPasswordHash?
    passwordHashCache    UserPasswordHashCache?
    lastVerificationMail DateTime?
    roles                Role[]                   @default([USER])
    gender               Gender                   @default(NOT_SET)
    preferredGender      Gender                   @default(NOT_SET)
    meetingStatus        Boolean                  @default(false)
    points               Int                      @default(0)
    medias               UserMedia[]
    favoriteRestaurants  UserFavoriteRestaurant[]
    follows              Follow[]                 @relation(name: "followUsersFrom")
    followedBy           Follow[]                 @relation(name: "followUsersTo")
    reviewLikes          ReviewLike[]
    writtenReviews       BaseReview[]
    uploadedImages       Image[]
    userOneMatch         Match[]                  @relation(name: "matchUserOne")
    userTwoMatch         Match[]                  @relation(name: "matchUserTwo")
}

model UserPasswordHash {
    user         User   @relation(fields: [forUserEmail], references: [email], onDelete: Cascade)
    forUserEmail String @id
    hash         String
}

model UserPasswordHashCache {
    user         User   @relation(fields: [forUserEmail], references: [email], onDelete: Cascade)
    forUserEmail String @id
    hash         String
}

model UserFavoriteRestaurant {
    id              String     @id @default(cuid())
    user            User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId          String
    restaurant      Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
    restaurantId    String
    rankingPosition Int
    createdDate     DateTime   @default(now())
    updatedDate     DateTime   @updatedAt

    @@unique([userId, restaurantId])
}

model UserMedia {
    id          String    @id @default(cuid())
    type        MediaType
    link        String
    user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      String
    createdDate DateTime  @default(now())
    updatedDate DateTime  @updatedAt
    hidden      Boolean   @default(false)
}

model Restaurant {
    id                 String                   @id @default(cuid())
    name               String                   @unique
    slug               String                   @unique
    address            Address?                 @relation(fields: [addressId], references: [id])
    addressId          String?                  @unique
    description        String
    createdDate        DateTime                 @default(now())
    updatedDate        DateTime                 @updatedAt
    hidden             Boolean                  @default(false)
    openingTimeMon     DateTime                 @db.Time()
    closingTimeMon     DateTime                 @db.Time()
    openingTimeTue     DateTime                 @db.Time()
    closingTimeTue     DateTime                 @db.Time()
    openingTimeWen     DateTime                 @db.Time()
    closingTimeWen     DateTime                 @db.Time()
    openingTimeThu     DateTime                 @db.Time()
    closingTimeThu     DateTime                 @db.Time()
    openingTimeFri     DateTime                 @db.Time()
    closingTimeFri     DateTime                 @db.Time()
    openingTimeSat     DateTime                 @db.Time()
    closingTimeSat     DateTime                 @db.Time()
    openingTimeSun     DateTime                 @db.Time()
    closingTimeSun     DateTime                 @db.Time()
    averageStars       Float?
    averageAmountSpent Float?
    reviews            RestaurantReview[]
    menu               Dish[]
    favoriteAmong      UserFavoriteRestaurant[]
    images             Image[]
}

model Dish {
    id           String       @id @default(cuid())
    name         String
    description  String
    priceZl      Int
    priceGr      Int
    totalStars   Int          @default(0)
    restaurant   Restaurant   @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
    restaurantId String
    reviews      DishReview[]
    createdDate  DateTime     @default(now())
    updatedDate  DateTime     @updatedAt
    hidden       Boolean      @default(false)
    type         DishType     @default(OTHER)
}

model Address {
    id          String      @id @default(cuid())
    name        String
    xCoords     Decimal
    yCoords     Decimal
    restaurant  Restaurant?
    createdDate DateTime    @default(now())
    updatedDate DateTime    @updatedAt
}

model Image {
    path              String       @id
    title             String?
    uploadedById      String
    uploadedBy        User         @relation(fields: [uploadedById], references: [id])
    uploadedDate      DateTime     @default(now())
    updatedDate       DateTime     @updatedAt
    usedInRestaurants Restaurant[]
    usedInReviews     BaseReview[]
}

model BaseReview {
    id              String           @id @default(cuid())
    author          User             @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId        String
    createdDate     DateTime         @default(now())
    hidden          Boolean          @default(false)
    likes           Int              @default(0)
    dislikes        Int              @default(0)
    likeObjects     ReviewLike[]
    images          Image[]
    responses       ResponseReview[] @relation(name: "response")
    responsesAmount Int              @default(0)

    // Possible dependents
    restaurantReview RestaurantReview?
    dishReview       DishReview?
    responseReview   ResponseReview?   @relation(name: "dependent")
}

model RestaurantReview {
    // Required to work as review
    id              String     @id
    baseData        BaseReview @relation(fields: [id], references: [id], onDelete: Cascade)
    updatedDate     DateTime   @updatedAt
    subject         Restaurant @relation(fields: [subjectId], references: [id], onDelete: Cascade)
    subjectId       String
    // Custom for review
    content         String
    censoredContent String
    stars           Int
    amountSpent     Int
}

model DishReview {
    // Required to work as review
    id              String     @id
    baseData        BaseReview @relation(fields: [id], references: [id], onDelete: Cascade)
    updatedDate     DateTime   @updatedAt
    subject         Dish       @relation(fields: [subjectId], references: [id], onDelete: Cascade)
    subjectId       String
    // Custom for review
    content         String
    censoredContent String
    stars           Int
}

model ResponseReview {
    // Required to work as review
    id              String     @id
    baseData        BaseReview @relation(fields: [id], references: [id], onDelete: Cascade, name: "dependent")
    updatedDate     DateTime   @updatedAt
    subject         BaseReview @relation(fields: [subjectId], references: [id], onDelete: Cascade, name: "response")
    subjectId       String
    // Custom for review
    content         String
    censoredContent String
}

model ReviewLike {
    like        Boolean
    review      BaseReview @relation(fields: [reviewId], references: [id], onDelete: Cascade)
    reviewId    String
    author      User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId    String
    createdDate DateTime   @default(now())
    updatedDate DateTime   @updatedAt

    @@id([authorId, reviewId])
}

model Follow {
    id     String   @id @default(cuid())
    from   User     @relation(name: "followUsersFrom", fields: [fromId], references: [id], onDelete: Cascade)
    fromId String
    to     User     @relation(name: "followUsersTo", fields: [toId], references: [id], onDelete: Cascade)
    toId   String
    date   DateTime @default(now()) @db.Timestamp()
}

model Match {
    userOneId String
    userTwoId String
    userOne   User         @relation(name: "matchUserOne", fields: [userOneId], references: [id], onDelete: Cascade)
    userTwo   User         @relation(name: "matchUserTwo", fields: [userTwoId], references: [id], onDelete: Cascade)
    value     MatchRequest
    sentAt    DateTime     @default(now()) @db.Timestamp()

    @@id([userOneId, userTwoId])
}

// Required by Next-Auth
model Account {
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([provider, providerAccountId])
}

model Session {
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
    credentialID         String  @unique
    userId               String
    providerAccountId    String
    credentialPublicKey  String
    counter              Int
    credentialDeviceType String
    credentialBackedUp   Boolean
    transports           String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([userId, credentialID])
}

enum Gender {
    FEMALE
    MALE
    NOT_SET
    NON_BINARY
}

enum MediaType {
    FACEBOOK
    INSTAGRAM
    SNAPCHAT
    TWITTER
    TIKTOK
    GITHUB
}

enum Role {
    USER
    MODERATOR
    ADMIN
}

enum DishType {
    STARTER
    SOUP
    MAIN_DISH
    DESSERT
    OTHER
    DRINK
    SIDE
    TOP
}

enum MatchRequest {
    ACCEPTED
    DENIED
    PENDING
}
